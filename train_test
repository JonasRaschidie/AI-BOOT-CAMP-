# @ Author : Mohammad Amin Rashidi <Jonas Rashidi>

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, ConfusionMatrixDisplay

iris = load_iris()
data = pd.DataFrame(iris.data, columns=iris.feature_names)
data['species'] = iris.target
X = data.drop('species', axis=1)
y = data['species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
param_grid_knn = {
    'n_neighbors': [3, 5, 7, 10],
    'weights': ['uniform', 'distance']
}
grid_search_knn = GridSearchCV(KNeighborsClassifier(), param_grid_knn, cv=5, scoring='accuracy')
grid_search_knn.fit(X_train, y_train)
best_knn = grid_search_knn.best_estimator_
cv_scores_knn = cross_val_score(best_knn, X_train, y_train, cv=5)
y_pred_knn = best_knn.predict(X_test)
accuracy_knn = accuracy_score(y_test, y_pred_knn)
print(f"KNN Accuracy: {accuracy_knn:.2f}")
print(f"KNN Cross-Validation Scores: {cv_scores_knn}")
print(f"KNN Average Cross-Validation Score: {cv_scores_knn.mean():.2f}")
print("\nKNN Classification Report:")
print(classification_report(y_test, y_pred_knn, target_names=iris.target_names))
cm_knn = confusion_matrix(y_test, y_pred_knn, labels=best_knn.classes_)
disp_knn = ConfusionMatrixDisplay(confusion_matrix=cm_knn, display_labels=iris.target_names)
disp_knn.plot()

plt.title('KNN Confusion Matrix')
plt.show()


# @ Author : Mohammad Amin Rashidi <Jonas Rashidi>
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler, label_binarize
from sklearn.metrics import roc_auc_score, accuracy_score, confusion_matrix, classification_report, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import numpy as np

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('pca', PCA(n_components=2)),  
    ('svc', SVC(probability=True))  
])
param_grid_svm = {
    'svc__kernel': ['linear', 'rbf', 'poly'],
    'svc__C': [0.1, 1, 10, 100],
    'svc__gamma': ['scale', 'auto'] 
}
grid_search_svm = GridSearchCV(pipeline, param_grid_svm, cv=5, scoring='accuracy')
grid_search_svm.fit(X, y) 
best_svm = grid_search_svm.best_estimator_
y_pred_svm = best_svm.predict(X_test)
y_proba_svm = best_svm.predict_proba(X_test)  
y_test_bin = label_binarize(y_test, classes=np.unique(y))
y_proba_svm_bin = np.array(y_proba_svm)  
roc_auc_svm = roc_auc_score(y_test_bin, y_proba_svm_bin, multi_class='ovr')
accuracy_svm = accuracy_score(y_test, y_pred_svm)
print(f"SVM Accuracy: {accuracy_svm:.2f}")
print(f"SVM ROC-AUC: {roc_auc_svm:.2f}")
print("\nSVM Classification Report:")
print(classification_report(y_test, y_pred_svm, target_names=iris.target_names))
cm_svm = confusion_matrix(y_test, y_pred_svm, labels=best_svm.classes_)
disp_svm = ConfusionMatrixDisplay(confusion_matrix=cm_svm, display_labels=iris.target_names)
disp_svm.plot()
X_pca = best_svm.named_steps['pca'].transform(X)
plt.figure(figsize=(10, 6))
for i, target_name in enumerate(iris.target_names):
    plt.scatter(X_pca[y == i, 0], X_pca[y == i, 1], label=target_name)

plt.title('PCA of Iris Dataset with SVM Decision Boundaries')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend()
plt.show()
plt.title('SVM Confusion Matrix')
plt.show()

